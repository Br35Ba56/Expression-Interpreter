<program> -> <exp> , <assigns> ;
<exp> -> ( <exp> <op> <exp> ) | '(' <exp> ':' <exp> '?' <exp> ')' |
'(' <exp> '!' ') | <literal> | <variable>
<assigns> -> <assigns> , <assign>
<assign> -> <variable> = <literal>
<op> -> '+' | '-' | '*' | '/' | '>' | '<' | '=' | '&' | '|'

Note:
-In the conditional expression operator, the symbols are reversed and the third
 operand represents the condition. The first operand is the value when true and
 the second the value when false
-The logical operators use single symbols not
 double, for example the and operator is & not &&
-The negation operator ! is a postfix operator, not a prefix one
-There are only three relational operators not the usual six and the operator
 for equality is = not ==

Test Cases for Math

((6*3)/ (3+a)),a = 2; Value = 3.6, Returned 3.6;
(((4*b)/(3+7)) + (a-4)), b = 5, a = 6; Value = 4, Returned 4

Test Cases for Booleans

((a<b) | (b=a)), a = 4, b = 5; Value = 1, Returned 1
((a<b) | (b=a)), a = 4, b = 4; Value = 1, Returned 1
((a<b) | (a>b)), a = 6, b = 4; Value = 1, Returned
(((a=b)!) & (b = c)), a = 3, b = 4, c = 3, d = 4;  Value = 0, Returned 0
(((a=b)!) | (b = c)), a = 3, b = 4, c = 3, d = 4;  Value = 1, Returned 1
((((a=b)!) | (b = c))!), a = 3, b = 4, c = 3, d = 4; Value = 0, Returned 0

Test Cases for Ternary

((6*6) : (6+6) ? (a = b)),a = 3, b = 4; Value = 12, Returned 12
((6*6) : (6+6) ? (a = b)),a = 3, b = 3; Value = 36, Returned 36

Nested Ternary
(((6*1) : (6+1) ? (3 = 4)) : (6+6) ? (a = b)),a=3, b =3; Value = 7, Returned 7
(((6*1) : (6+1) ? (c = d)) : (6+6) ? (a = b)),a=3, b=3, c = 4, d = 4; Value = 6, Returned 6

Nested Ternary with Negation
(((6*1) : (6+1) ? (3 = 3)) : ((6*1) : (6+1) ? ((3 < 4)!)) ? (a = b)),a=2, b = 3; Value = 7, Returned 7

(((6*1) : (6+1) ? (3 = 3)) : ((6*1) : (6+1) ? ((3 < 4)!)) ? ((a = b)!)),a=2, b = 3; Value = 6, Returned 6

(((6*1) : (6+1) ? ((3 = 3)!)) : ((6*1) : (6+1) ? ((3 < 4)!)) ? ((a = b)!)),a=2, b = 3; Value = 7, Returned 7
